# vim:fdm=marker

# Newsflo                                                                   {{{1
# ==============================================================================
alias tunnel-live-aurora-WRITEABLE='tunnel-open 4306 aurora-newsflo-live.cluster-cyva1uzg7p7h.us-east-1.rds.amazonaws.com 3306 s.white@bastion.live.newsflo'

alias ssh-newsflo='ssh -F ~/.ssh/config-newsflo'

# AWS authentication                                                        {{{1
# ==============================================================================

alias aws-which="env | grep AWS | sort"
alias aws-clear-variables="for i in \$(aws-which | cut -d= -f1,1 | paste -); do unset \$i; done"
alias aws-bos-utility="aws-developer-role $SECRET_ACC_BOS_UTILITY ADFS-Developer aws-rap-bosutility"
alias aws-bos-dev="aws-developer-role $SECRET_ACC_BOS_DEV ADFS-Developer aws-rap-bosdev"
alias aws-bos-staging="aws-developer-role $SECRET_ACC_BOS_STAGING ADFS-Developer aws-rap-bosstaging"
alias aws-bos-prod="aws-developer-role $SECRET_ACC_BOS_PROD ADFS-Developer aws-rap-bosprod"
alias aws-newsflo-dev="aws-developer-role $SECRET_ACC_NEWSFLO_DEV ADFS-EnterpriseAdmin aws-rap-recommendersdev"
alias aws-newsflo-prod="aws-developer-role $SECRET_ACC_NEWSFLO_PROD ADFS-EnterpriseAdmin aws-rap-recommendersprod"
alias aws-recs-dev="aws-developer-role $SECRET_ACC_RECS_DEV ADFS-EnterpriseAdmin aws-rap-recommendersdev"
alias aws-recs-prod="aws-developer-role $SECRET_ACC_RECS_PROD ADFS-EnterpriseAdmin aws-rap-recommendersprod"

function ssh-find-username() {
    if [[ $# -ne 1 ]] ; then
        echo 'Usage: ssh-find-username ADDRESS'
        return 1
    fi

    local addr=$1

    local USERNAMES=(
        centos
        ec2-user
        hadoop
        admin
    )

    for username in $USERNAMES[@]; do
        printf "${COLOR_CLEAR_LINE}Trying %s" "${username}"
        capturedOutput=$(ssh -q -o ConnectTimeout=5 "${username}@${addr}" "echo 'Test command'" 2>&1)
        exitCode=$?
        if [ $exitCode -eq 0 ]; then
            printf "${COLOR_CLEAR_LINE}${username}\n"
            return 0
        fi
    done
    printf "${COLOR_CLEAR_LINE}Unable to find username for ${addr}\n"
    return 1
}

function aws-switch-role() {
    declare roleARN=$1 profile=$2

    export username=white1@science.regn.net
    LOGIN_OUTPUT="$(aws-adfs login --adfs-host federation.reedelsevier.com --region us-east-1 --session-duration 14400 --role-arn $roleARN --env --profile $profile --printenv | grep export)"
    AWS_ENV="$(echo $LOGIN_OUTPUT | grep export)"
    eval $AWS_ENV
    export AWS_REGION=us-east-1
    aws-which
}

function aws-developer-role() {
    declare accountId=$1 role=$2 profile=$3
    aws-switch-role "arn:aws:iam::${accountId}:role/${role}" "${profile}"
}

# Machine specific aliases                                                  {{{1
# ==============================================================================

alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
alias emacsclient='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient'
alias sqlworkbenchj='java -jar /Applications/SQLWorkbenchJ.app/Contents/Java/sqlworkbench.jar &'

# Kubernetes                                                                {{{1
# ==============================================================================

source <(kubectl completion zsh)

function recs-get-k8s() {
    if [[ $# -ne 2 ]] ; then
        echo "Usage: recs-get-k8s (dev|live) (util|main)"
    else
        local recsEnv=$1
        local recsSubEnv=$2
        aws s3 cp s3://com-elsevier-recs-${recsEnv}-certs/eks/recs-eks-${recsSubEnv}-${recsEnv}.conf ~/.kube/
        export KUBECONFIG=~/.kube/recs-eks-${recsSubEnv}-${recsEnv}.conf
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)' \
    '2:sub-environment arg:(util main)'" \
    recs-get-k8s

function recs-k9s-dev() {
    aws-recs-dev
    recs-get-k8s dev main
    k9s
}

function recs-k9s-dev-util() {
    aws-recs-dev
    recs-get-k8s dev util
    k9s
}

function recs-k9s-staging() {
    aws-recs-dev
    recs-get-k8s staging main
    k9s
}

function recs-k9s-live() {
    aws-recs-prod
    recs-get-k8s live main
    k9s
}

function recs-k9s-live-util() {
    aws-recs-prod
    recs-get-k8s live util
    k9s
}

function recs-ecr-login() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: recs-ecr-login (dev|live)"
    else
        local recsEnv=$1
        local region="us-east-1"

        local accountId
        case "${recsEnv}" in
            dev*)
                accountId=$SECRET_ACC_RECS_DEV
            ;;

            live*)
                accountId=$SECRET_ACC_RECS_PROD
            ;;

            *)
                echo "ERROR: Unrecognised environment ${recsEnv}"
                return -1
            ;;
        esac

        aws ecr get-login-password --region "${region}" | docker login --username AWS --password-stdin "${accountId}.dkr.ecr.${region}.amazonaws.com"
        echo "Pull images with:" 
        echo "  " docker pull "${accountId}.dkr.ecr.${region}.amazonaws.com/IMAGE:VERSION"
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)'" \
    recs-ecr-login

function recs-api-versions() {
    if [[ $# -ne 1 ]] ; then
        echo "Usage: recs-api-versions (dev|live)"
    else
        local recsEnv=$1

        [[ ${recsEnv} == "dev" ]]  && aws-recs-dev  > /dev/null
        [[ ${recsEnv} == "live" ]] && aws-recs-prod > /dev/null

        recs-get-k8s $1 main > /dev/null

        kubectl get po -A -o json \
            | jq -r ".items[].status.containerStatuses[].image" \
            | grep "api" \
            | gsed -e 's/^.*\/api\///g' \
            | sort \
            | uniq \
            | tr ':' ',' \
            | tabulate-by-comma    
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)'" \
    recs-api-versions

function recs-get-emr-logs() {
    setopt local_options BASH_REMATCH
    if [[ $# -ne 1 ]]; then
        echo "Usage: recs-get-emr-logs S3_PATH"
    else
        local s3Path=$1
        if [[ ${s3Path} =~ "com-elsevier-recs-(.+)-logs" ]]; then
            local recsEnv=$BASH_REMATCH[2]
            case "${recsEnv}" in
                dev*)
                    aws-recs-dev
                    ;;

                live*)
                    aws-recs-prod
                    ;;

                *)
                    echo "ERROR: Unrecognised environment ${recsEnv}"
                    return -1
                    ;;
            esac

            # Clean old logs if they exist
            rm -rf ~/trash/logs
            mkdir ~/trash/logs
            pushd ~/trash/logs

            # Copy the logs
            aws s3 cp --recursive "${s3Path}" .

            # Unzip
            while read -r line; do
                echo "$line"
                gunzip "$line"
            done < <(find . -name "*.gz")

            # Start nvim, search for error, view only results
            nvim -c 'Ack! error' -c 'only'
        else
            echo "ERROR: Unrecognised path ${s3Path}"
        fi
    fi
}

# APIs
# ==============================================================================

function recs-api-statuses() {
    local APIS=(
        #article-recommendations-popular.api
        article-recommendations-tailored.api
        #article-recommendations-trending.api
        fi-recommender.api
        #funding-logged-email-events.api
        library-stats.api
        raven-email-sent-stats.api
        recs-events-service.api
        recs-focus-stats.api
        #recs-funding-institutional-recommender.api
        #recs-mendeley-funding-recommender.api
        recs-reviewers-recommender.api
        sd-article-recommendations.api
        sd-hpcc-related-articles.api
        sd-logged-email-events.api
        sd-related-articles.api
        sd-user-activity.api
        sd-user-recommendations.api
    )
    (
        #printf "%s|%s|%s|%s|%s\n" "API" "Dev" "Staging" "Live" "Dev URL"
        printf "%s|%s|%s|%s\n" "API" "Dev" "Live" "Dev URL"
        for API in "${APIS[@]}"
        do
            printf "%s" "${API}"
            curl -s -w "%{http_code}" -o >(printf "|%s") -X GET "https://${API}.dev.recs.d.elsevier.com/api" 2>/dev/null
            #curl -s -w "%{http_code}" -o >(printf "|%s") -X GET "https://${API}.staging.recs.d.elsevier.com/api" 2>/dev/null
            curl -s -w "%{http_code}" -o >(printf "|%s") -X GET "https://${API}.recs.d.elsevier.com/api" 2>/dev/null
            printf "|%s" "https://${API}.dev.recs.d.elsevier.com/api"
            printf "\n"
        done
    ) | column -t -s '|' \
      | highlight red   '\b[045][0-9]\+\b' \
      | highlight green '\b[2][0-9]\+\b'
}

function recs-fi-performance() {
    hey -n 20 -c 3 -H 'Accept: application/json' -m GET 'https://fi-recommender.api.recs.d.elsevier.com/api/fi-recommendations/webuser/37325013/author/23982012500'
}

# Data pipelines
# ==============================================================================

function recs-reviewers-evise-dumps() {
    if [[ $# -ne 1 ]] ; then
        echo "Usage: recs-reviewers-evise-dumps (dev|live)"
    else
        local recsEnv=$1

        [[ ${recsEnv} == "dev" ]]  && aws-recs-dev  > /dev/null
        [[ ${recsEnv} == "live" ]] && aws-recs-prod > /dev/null

        manuscriptsPath="s3://com-elsevier-recs-${recsEnv}-reviewers/raw/batched-manuscripts"
        reviewersPath="s3://com-elsevier-recs-${recsEnv}-reviewers/raw/batched-reviewers"

        manuscriptsTimestamp=$(aws s3 ls "${manuscriptsPath}/" | tail -n 1 | awk '{ print $2; }' | gsed 's/\///g')
        reviewersTimestamp=$(aws s3 ls "${reviewersPath}/" | tail -n 1 | awk '{ print $2; }' | gsed 's/\///g')

        (
            printf "Data set|Timestamp|Count\n"
            printf "%s|%s|%s\n" "Reviewers"   ${reviewersTimestamp}   $(aws s3 ls "${reviewersPath}/${reviewersTimestamp}/data/"     | wc -l)
            printf "%s|%s|%s\n" "Manuscripts" ${manuscriptsTimestamp} $(aws s3 ls "${manuscriptsPath}/${manuscriptsTimestamp}/data/" | wc -l)
        ) | column -t -s '|'
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)'" \
    recs-reviewers-evise-dumps

# Quality metrics
# ==============================================================================

function recs-reviewers-quality-metrics() {
    dashboard="MjA5OTI0M3xWSVp8REFTSEJPQVJEfGRhOjQ1MDIyOA"

    # Find the sub-dashboards in the main page
    subDashboardsResponse=$(curl -s https://api.newrelic.com/graphql \
        -H 'Content-Type: application/json' \
        -H "API-Key: ${SECRET_NEWRELIC_API_KEY}" \
        --data-binary '{"query":"{ actor { entity(guid: \"'${dashboard}'\") { ... on DashboardEntity { guid name pages { guid name } } } } } ", "variables":""}'
    )

    subDashboard=$(echo "${subDashboardsResponse}" | jq -r '.data.actor.entity.pages[0].guid')

    # Generate a new URL for the current data
    dashboardUrlResponse=$(curl -s https://api.newrelic.com/graphql \
        -H 'Content-Type: application/json' \
        -H "API-Key: ${SECRET_NEWRELIC_API_KEY}" \
        --data-binary '{"query":"mutation { dashboardCreateSnapshotUrl(guid: \"'${subDashboard}'\") } ", "variables":""}'
    )

    dashboardUrl=$( \
        echo "${dashboardUrlResponse}" \
        | jq -r '.data.dashboardCreateSnapshotUrl' \
        | sed 's/format=PDF/format=PNG/' \
    )

    # Download and show
    wget -q "${dashboardUrl}" -O - | imgcat -R
}

# Lambda timings
# ==============================================================================

function recs-reviewers-lambda-timings() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: recs-reviewers-lambda-timings (dev|staging|live)"
    else
        local recsEnv=$1
        awslogs get --no-group --no-stream --timestamp -s "5m" /aws/lambda/recs-reviewers-recommender-lambda-${recsEnv} \
            | grep Instrumentation \
            | gsed -r 's/^.* (.+) - ([0-9]+) ms$/\1 \2/' \
            | datamash --sort --field-separator=' ' --round=1 --header-out -g 1 min 2 mean 2 max 2 \
            | column -s ' ' -t
    fi
}
compdef "_arguments \
    '1:environment arg:(dev staging live)'" \
    recs-reviewers-lambda-timings

# SonarQube                                                                 {{{1
# ==============================================================================

function sonarqube-run() {
    if [[ $# -ne 1 ]] ; then
        echo "Usage: sonarqube-run TOKEN"
        echo "  Token can be retrieved from recs-secrets"
    else
        local sonarToken=$1

        local sonarServer="https://sq.prod.tio.elsevier.systems"
        local sonarScannerHome=$(full-path "$(which sonar-scanner | xargs readlink -f | xargs dirname)/..")
        local sonarOpts="-Dsonar.host.url=\"${sonarServer}\" -DsonarScanner.home=\"${sonarScannerHome}\" -Dsonar.login=\"${sonarToken}\""

        echo "NOTE: Ensure you have first generated coverage with 'sbt clean coverage test coverageReport'"
        SONAR_SCANNER_HOME="${sonarScannerHome}" sbt -Dsonar.host.url="${sonarServer}" -Dsonar.login="${sonarToken}" sonarScan
    fi
}


# Conda                                                                     {{{1
# ==============================================================================

function conda-insinuate() {
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
            . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
        else
            export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
}

# Newsflo AWS                                                               {{{1
# ==============================================================================

function sshx-tagged-aws-machines() {
    if [[ $# -ne 3 ]] ; then
        echo 'Usage: sshx-tagged-aws-machines TAG'
        return 1
    fi

    declare tag=$1

    echo 'Finding machines'
    machines=($(aws ec2 describe-instances | jq --raw-output '.Reservations[].Instances[]? | select(.State.Name=="running") | select(.Tags[] | select((.Key=="Name") and (.Value=="'$tag'"))) | .NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress'))

    echo "Opening SSH to $machines[*]"
    i2cssh $machines[*]
}

function aws-instance-info() {
    local tag=$1

    aws ec2 describe-instances | jq --raw-output '.Reservations[].Instances[]? | select(.Tags[].Value=="'$tag'") | select(.State.Name=="running")'
}
compdef _aws-tag aws-instance-info

# List the values of tagged AWS instances
function aws-tag-values() {
    if [[ $# -ne 1 ]] ; then
        echo 'Usage: aws-tag-values PROFILE REGION KEY'
        return 1
    fi

    local key=$1

    aws ec2 describe-instances | jq --raw-output '.Reservations[].Instances[].Tags[]? | select(.Key=="'$key'") | .Value' | sort | uniq
}
compdef _aws-tag aws-tag-values

# List the IPs for tagged AWS instances
function aws-instance-ips() {
    if [[ $# -ne 1 ]] ; then
        echo 'Usage: aws-instance-ips TAG'
        return 1
    fi

    local tag=$1

    aws ec2 describe-instances | jq --raw-output '.Reservations[].Instances[] | select(.Tags[]?.Value=="'$tag'") | select(.State.Name=="running") | .PrivateIpAddress' | sort | uniq
}
compdef _aws-tag aws-instance-ips

# List the IPs for all AWS instances
function aws-all-instance-ips() {
    aws ec2 describe-instances | jq --raw-output '["Name", "IP address", "Instance ID", "Instance type", "AMI ID", "Launch time", "Monitoring"], (.Reservations[].Instances[]? | select(.State.Name=="running") | [ (.Tags[]? | (select(.Key=="Name")).Value) // "-", .NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress, .InstanceId, .InstanceType, .ImageId, .LaunchTime, .Monitoring.State]) | @csv' | sort | column -t -s "," | sed 's/\"//g'
}

# List AWS instance limits
function aws-ec2-instance-limits() {
    aws service-quotas list-service-quotas --service-code ec2 | jq --raw-output '(.Quotas[] | ([.QuotaName, .Value])) | @csv' | column -t -s "," | sed 's/\"//g'
}

function active-directory-service-user-info() {
    dscl "/Active Directory/SCIENCE/All Domains" read "/Users/white1"
}

function recs-build-and-publish-jar() {
    sbt-no-test clean assembly

    local assembly=$(find target -type f -name *-assembly-*.jar)
    local appsPath=s3://com-elsevier-recs-live-experiments/stuw-hacked-apps

    if [[ $assembly =~ ".*/(.*)-assembly-.*" ]]
    then
        local prefix="${BASH_REMATCH[2]}"
        local timestamp=$(date +"%Y%m%d-%H%M")
        local name="${prefix}-assembly-hacked-app-${timestamp}.jar"

        aws-recs-prod
        aws s3 cp "${assembly}" "${appsPath}/${name}"
    else
        echo "Assembly not found"
    fi
}

# JIRA                                                                      {{{1
# ==============================================================================

function jira-my-issues() {
    curl -s -G 'https://elsevier.atlassian.net/rest/api/2/search' \
        --data-urlencode "jql=project=SDPR AND assignee = currentUser() AND status IN (\"In Progress\")" \
        --user "${SECRET_JIRA_USER}:${SECRET_JIRA_API_KEY}" \
        | jq -r ".issues[] | [.key, .fields.summary] | @tsv" \
        | tabulate-by-tab
}

function jira-branch() {
    git checkout -b $1
}
compdef _jira-branch jira-branch
