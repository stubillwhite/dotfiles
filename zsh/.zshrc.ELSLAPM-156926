# vim:fdm=marker

# Newsflo                                                                   {{{1
# ==============================================================================
alias tunnel-live-aurora-WRITEABLE='tunnel-open 4306 aurora-newsflo-live.cluster-cyva1uzg7p7h.us-east-1.rds.amazonaws.com 3306 s.white@bastion.live.newsflo'

# AWS authentication                                                        {{{1
# ==============================================================================

alias "aws-which"="env | grep AWS | sort"
alias "aws-clear-variables"="for i in \$(aws-which | cut -d= -f1,1 | paste -); do unset \$i; done"
alias aws-bos-utility="aws-developer-role $ACC_BOS_UTILITY ADFS-Developer aws-rap-bosutility"
alias aws-bos-dev="aws-developer-role $ACC_BOS_DEV ADFS-Developer aws-rap-bosdev"
alias aws-bos-staging="aws-developer-role $ACC_BOS_STAGING ADFS-Developer aws-rap-bosstaging"
alias aws-bos-prod="aws-developer-role $ACC_BOS_PROD ADFS-Developer aws-rap-bosprod"
alias aws-recs-dev="aws-developer-role $ACC_RECS_DEV ADFS-EnterpriseAdmin aws-rap-recommendersdev"
alias aws-recs-prod="aws-developer-role $ACC_RECS_PROD ADFS-EnterpriseAdmin aws-rap-recommendersprod"

function aws-switch-role() {
    declare roleARN=$1 profile=$2

    export username=white1@science.regn.net
    LOGIN_OUTPUT="$(aws-adfs login --adfs-host federation.reedelsevier.com --region us-east-1 --session-duration 14400 --role-arn $roleARN --env --profile $profile --printenv | grep export)"
    AWS_ENV="$(echo $LOGIN_OUTPUT | grep export)"
    eval $AWS_ENV
    export AWS_REGION=us-east-1
    aws-which
}

function aws-developer-role() {
    declare accountId=$1 role=$2 profile=$3
    aws-switch-role "arn:aws:iam::${accountId}:role/${role}" "${profile}"
}

# Machine specific aliases                                                  {{{1
# ==============================================================================

alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
alias sqlworkbenchj='java -jar /Applications/SQLWorkbenchJ.app/Contents/Java/sqlworkbench.jar &'

# Kubernetes                                                                {{{1
# ==============================================================================

source <(kubectl completion zsh)

function recs-get-k8s() {
    if [[ $# -ne 2 ]] ; then
        echo "Usage: recs-get-k8s (dev|live) (util|main)"
    else
        local recsEnv=$1
        local recsSubEnv=$2
        aws s3 cp s3://com-elsevier-recs-${recsEnv}-certs/eks/recs-eks-${recsSubEnv}-${recsEnv}.conf ~/.kube/
        export KUBECONFIG=~/.kube/recs-eks-${recsSubEnv}-${recsEnv}.conf
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)' \
    '2:sub-environment arg:(util main)'" \
    recs-get-k8s

function recs-k9s-dev() {
    aws-recs-dev
    recs-get-k8s dev main
    k9s
}

function recs-k9s-live() {
    aws-recs-prod
    recs-get-k8s live main
    k9s
}

function recs-k9s-util() {
    aws-recs-prod
    recs-get-k8s live util
    k9s
}

function recs-ecr-login() {
    if [[ $# -ne 1 ]] ; then
        echo "Usage: recs-ecr-login (dev|live)"
    else
        local recsEnv=$1
        local region="us-east-1"

        local accountId
        case "${recsEnv}" in
            dev*)
                accountId=$ACC_RECS_DEV
            ;;

            live*)
                accountId=$ACC_RECS_PROD
            ;;

            *)
                echo "ERROR: Unrecognised environment ${recsEnv}"
                return -1
            ;;
        esac

        aws ecr get-login-password --region "${region}" | docker login --username AWS --password-stdin "${accountId}.dkr.ecr.${region}.amazonaws.com"
    fi
}
compdef "_arguments \
    '1:environment arg:(dev live)'" \
    recs-ecr-login

# APIs
# ==============================================================================

function recs-api-statuses() {
    local APIS=(
        article-recommendations-popular.api
        article-recommendations-tailored.api
        article-recommendations-trending.api
        fi-recommender.api
        funding-logged-email-events.api
        library-stats.api
        people-co-authors.api
        raven-email-sent-stats.api
        recs-events-service.api
        recs-focus-stats.api
        recs-funding-institutional-recommender.api
        recs-mendeley-funding-recommender.api
        recs-mendeley-user-rep.api
        recs-reviewers-recommender.api
        sd-article-recommendations.api
        sd-hpcc-related-articles.api
        sd-logged-email-events.api
        sd-related-articles.api
        sd-user-activity.api
        sd-user-recommendations.api
        sutd-recommender.api
    )
    (
        printf "%s|%s|%s\n" "API" "Dev" "Live"
        for API in "${APIS[@]}"
        do
            printf "%s" "${API}"
            curl -s -w "%{http_code}" -o >(printf "|%s") -X GET "https://${API}.dev.recs.d.elsevier.com/api" 2>/dev/null
            curl -s -w "%{http_code}" -o >(printf "|%s") -X GET "https://${API}.recs.d.elsevier.com/api" 2>/dev/null
            printf "\n"
        done
    ) | column -t -s '|' \
      | highlight red   '[45][0-9]\+' \
      | highlight green '[2][0-9]\+'
}

# SonarQube                                                                 {{{1
# ==============================================================================

function sonarqube-run() {
    if [[ $# -ne 1 ]] ; then
        echo "Usage: sonarqube-run TOKEN"
        echo "  Token can be retrieved from recs-secrets"
    else
        local sonarToken=$1

        local sonarServer="https://eols.sq.tio-cloud.com"
        local sonarScannerHome="/usr/local/Cellar/sonar-scanner/4.3.0.2102"
        local sonarOpts="-Dsonar.host.url=\"${sonarServer}\" -DsonarScanner.home=\"${sonarScannerHome}\" -Dsonar.login=\"${sonarToken}\""

        #sbt clean coverage test coverageReport
        echo sbt "-Dsonar.verbose=true ${sonarOpts} sonarScan"
        sbt "-Dsonar.verbose=true ${sonarOpts} sonarScan"
    fi
}

# Conda                                                                     {{{1
# ==============================================================================

function conda-insinuate() {
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
            . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
        else
            export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
}
